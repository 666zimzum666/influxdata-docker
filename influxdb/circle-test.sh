#!/bin/bash
set -eo pipefail

declare -r SCRIPT_DIR=$(cd $(dirname $0) >/dev/null 2>&1 && pwd)

declare -r TMP=${SCRIPT_DIR}/test-tmp
declare -r LOGS=${SCRIPT_DIR}/test-logs

#####################
##### UTILITIES #####
#####################

function log_msg () {
  echo "[$(date '+%Y/%m/%d %H:%M:%S %z')]" ${@}
}

function ensure_jq () {
    if ! which jq > /dev/null; then
        log_msg Error: 'jq' required to run tests
        exit 1
    fi
}

function tag_suffix () {
    if [ -n "$CIRCLE_BUILD_NUM" ]; then
        echo ${CIRCLE_BUILD_NUM}
    else
        date '+%Y-%m-%dT%H-%M-%S'
    fi
}

declare -r ATTEMPTS=10

function wait_for_startup () {
    local attempt_count=0
    while [ ${attempt_count} -lt ${ATTEMPTS} ]; do
        if docker logs ${1} 2>&1 | grep -q Listening; then
            return 0
        fi
        sleep 1
        attempt_count=$((attempt_count + 1))
    done
    log_msg Error: container ${1} did not start up in time
    return 1
}

function extract_token () {
    sed -En 's/^[[:space:]]+token[[:space:]]+=[[:space:]]+"([^"]+)"/\1/p' ${1}
}

###########################
##### SETUP / CLEANUP #####
###########################

# Reuse a 1.x data zip from influxdb's tests to save time/effort.
declare -r INFLUXDB_1x_DATA_COMMIT=c62d3f2d8df917ce06741e98a72b7763fff875c8
declare -r INFLUXDB_1x_DATA_URL=https://github.com/influxdata/influxdb/raw/${INFLUXDB_1x_DATA_COMMIT}/cmd/influxd/upgrade/testdata/v1db.zip

function get_1x_data () {
    curl -sL -o ${TMP}/data.zip ${INFLUXDB_1x_DATA_URL}
    unzip -qq ${TMP}/data.zip -d ${TMP}
    rm ${TMP}/data.zip
}

function cleanup () {
    local -ra leftover_containers=($(docker ps -a -q -f name=*${suffix}))
    if [ ${#leftover_containers[@]} -gt 0 ]; then
        log_msg Cleaning up leftover containers...
        docker stop ${leftover_containers[@]}
        docker rm ${leftover_containers[@]}
    fi
    docker image rm -f influxdb:2.0-${1}
}

######################
##### TEST CASES #####
######################

declare -r TEST_USER=username
declare -r TEST_PASSWORD=password
declare -r TEST_ORG=org
declare -r TEST_BUCKET=bucket
declare -r TEST_RETENTION=1w

function test_2x_simple_boot () {
    local -r container_name=test_2x_simple_boot_${1}

    mkdir -p ${TMP}/test_2x_simple_boot/data
    mkdir -p ${TMP}/test_2x_simple_boot/config

    # First, run the container against the empty data dir.
    log_msg Booting 2.x container with no setup logic
    if ! docker run -i -d --name=${container_name} \
        -u $(id -u):influxdb \
        -p 8086:8086 \
        -v ${TMP}/test_2x_simple_boot/data:/var/lib/influxdb2 \
        -v ${TMP}/test_2x_simple_boot/config:/etc/influxdb2 \
        influxdb:2.0-${1} > /dev/null; then
        log_msg Error: failed to launch container
        return 1
    fi
    wait_for_startup ${container_name}

    # Make sure the DB reports that it hasn't been set up yet.
    log_msg Checking onboarding API pre-setup
    local onboarding_allowed=$(curl -s localhost:8086/api/v2/setup | jq .allowed)
    
    if [[ ${onboarding_allowed} != 'true' ]]; then
        log_msg Error: Onboarding not allowed pre-setup
        return 1
    fi

    # Use the influx CLI to set up the DB.
    log_msg Running manual setup
    if ! docker exec -i ${container_name} influx setup -f \
        --username ${TEST_USER} \
        --password ${TEST_PASSWORD} \
        --org ${TEST_ORG} \
        --bucket ${TEST_BUCKET}; then
        log_msg Error: failed to run 'influx setup' command
        return 1
    fi

    # Make sure the DB reports that it's been set up.
    log_msg Checking onboarding API post-setup
    onboarding_allowed=$(curl -s localhost:8086/api/v2/setup | jq .allowed)

    if [[ ${onboarding_allowed} != 'false' ]]; then
        log_msg Error: Onboarding allowed post-setup
        return 1
    fi

    # Hack the auth token out of the CLI configs generated by setup.
    local -r auth_token=$(extract_token ${TMP}/test_2x_simple_boot/config/influx-configs)

    # Make sure we can use the generated auth token to find the resources we expect.
    log_msg Checking org list post-setup
    local orgs=$(curl -s -H "Authorization: Token ${auth_token}" localhost:8086/api/v2/orgs | jq -r .orgs[].name)
    if [[ ${orgs} != ${TEST_ORG} ]]; then
        log_msg Error: Bad org list post-setup
        echo ${orgs}
        return 1
    fi

    log_msg Checking bucket list post-setup
    local buckets=$(curl -s -H "Authorization: Token ${auth_token}" "localhost:8086/api/v2/buckets?org=${TEST_ORG}&name=${TEST_BUCKET}" | jq -r .buckets[].name)
    if [[ ${buckets} != ${TEST_BUCKET} ]]; then
        log_msg Error: Bad bucket list post-setup
        echo ${buckets}
        return 1
    fi

    # Destroy the container
    log_msg Tearing down 2.x container
    docker stop ${container_name} > /dev/null
    docker logs ${container_name} > ${LOGS}/test_2x_simple_boot/init-docker-stdout.log 2> ${LOGS}/test_2x_simple_boot/init-docker-stderr.log
    docker rm ${container_name} > /dev/null

    # Check that files were persisted to the host.
    if [ ! -f ${TMP}/test_2x_simple_boot/data/influxd.bolt ]; then
        log_msg Error: BoltDB not persisted to host directory
        return 1
    fi
    if [ ! -f ${TMP}/test_2x_simple_boot/config/influx-configs ]; then
        log_msg Error: CLI configs not persisted to host directory
        return 1
    fi

    # Create a new container using the same mount-points.
    log_msg Booting another 2.x container
    if ! docker run -i -d --name=${container_name} \
        -p 8086:8086 \
        -v ${TMP}/test_2x_simple_boot/data:/var/lib/influxdb2 \
        -v ${TMP}/test_2x_simple_boot/config:/etc/influxdb2 \
        influxdb:2.0-${1} > /dev/null; then
        log_msg Error: failed to launch container
        return 1
    fi
    wait_for_startup ${container_name}

    # Make sure the DB still reports that it's been set up.
    log_msg Checking onboarding API after recreating container
    onboarding_allowed=$(curl -s localhost:8086/api/v2/setup | jq .allowed)

    if [[ ${onboarding_allowed} != 'false' ]]; then
        log_msg Error: Onboarding allowed after recreating container
        return 1
    fi

    # Make sure we can still use the generated auth token to find the resources we expect.
    log_msg Checking org list after recreating container
    local orgs=$(curl -s -H "Authorization: Token ${auth_token}" localhost:8086/api/v2/orgs | jq -r .orgs[].name)
    if [[ ${orgs} != ${TEST_ORG} ]]; then
        log_msg Error: Bad org list post-setup
        echo ${orgs}
        return 1
    fi

    log_msg Checking bucket list after recreating container
    local buckets=$(curl -s -H "Authorization: Token ${auth_token}" "localhost:8086/api/v2/buckets?org=${TEST_ORG}&name=${TEST_BUCKET}" | jq -r .buckets[].name)
    if [[ ${buckets} != ${TEST_BUCKET} ]]; then
        log_msg Error: Bad bucket list post-setup
        echo ${buckets}
        return 1
    fi
}

function test_2x_custom_config () {
    echo 'hola'
}

function test_2x_auto_setup_no_rp () {
    echo 'hola'
}

function test_2x_auto_setup_with_rp () {
    echo 'hola'
}

function test_2x_auto_setup_custom_config () {
    echo 'hola'
}

function test_2x_auto_setup_user_scripts () {
    echo 'hola'
}

function test_2x_auto_upgrade () {
    echo 'hola'
}

function test_2x_auto_upgrade_custom_config () {
    echo 'hola'
}

function test_2x_auto_upgrade_user_scripts () {
    echo 'hola'
}

declare -ra TEST_CASES=(
    test_2x_simple_boot
    test_2x_custom_config
    test_2x_auto_setup_no_rp
    test_2x_auto_setup_with_rp
    test_2x_auto_setup_custom_config
    test_2x_auto_setup_user_scripts
    test_2x_auto_upgrade
    test_2x_auto_upgrade_custom_config
    test_2x_auto_upgrade_user_scripts
)

#######################
##### ENTRY-POINT #####
#######################

function main () {
    ensure_jq

    local -r suffix=$(tag_suffix)
    trap "cleanup ${suffix}" EXIT

    log_msg Building test image
    docker build -t influxdb:2.0-${suffix} ${SCRIPT_DIR}/2.0

    rm -rf ${TMP}
    mkdir -p ${TMP}

    log_msg Downloading 1.x data archive
    get_1x_data

    local -a failed_tests=()

    for tc in ${TEST_CASES[@]}; do
        log_msg Running test ${tc}...
        mkdir -p ${LOGS}/${tc}
        set +e
        (set -eo pipefail; ${tc} ${suffix})
        local test_status=$?
        set -e
        if ((test_status)); then
            failed_tests+=(${tc})
            docker logs ${tc}_${suffix} > ${LOGS}/${tc}/docker-stdout.log 2> ${LOGS}/${tc}/docker-stderr.log
        fi
        # Assume a naming convention across tests.
        log_msg Cleaning up test ${tc}...
        docker stop ${tc}_${suffix} >/dev/null && docker rm ${tc}_${suffix} >/dev/null || true 
    done

    if [ ${#failed_tests[@]} -eq 0 ]; then
        log_msg All tests succeeded
    else
        log_msg Some tests failed:
        for tc in ${failed_tests[@]}; do
            echo -e "\t${tc}"
        done
        exit 1
    fi
}

main
